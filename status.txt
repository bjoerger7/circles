----- 1/28/19 -----
Spent most of today stressing out and discussing the database structure, as well as the multiple facets and difficulties in making a full messaging mobile application.

Brian
- research Pub / Sub functionality
- research notification structure (note: would we need a notifications table)
- become familiar with Rust
- make ERD and upload to GitHub

Eddie
- iOS file system - caching chats locally (how??)
- look into cognito - make sure it's free
- become familiar with Ionic - build something


----- 1/31/19 -----
Spent most of today implementing the first draft of our mock-ups using moqup.com. During this time, we made decisions on many of our flows and general application ideas. We decided that messages will not be stored on the phone for our MVP (most likely) and also discussed what information will be retrieved on startup.

Some decisions that we made since the last meeting: we will be using Go for our backend, Brian is in love with GraphQL so we will be using it, Eddie was researching Ionic but is on the verge of deciding to use React Native.

Brian
- research backend architecture (microservice vs. monolithic)
- research notification structure (note: would we need a notifications table)
- research long-polling, open-socket, firebase, and bananas

Eddie
- decide (don't be cheap) between Ionic and React Native
- look into Cognito - make sure it's free

Next time we will begin setup for backend.


----- 2/5/19 -----
Continued mock-ups using moqup.com. During this time, we made decisions on many of our flows and general application ideas, and talked about possible future directions to take with Circles.


----- 2/12/19 -----
Completed our Software Requirements Specification. Then, we began to layout or code base and asked for advice from colleagues.

Brian
- look into GraphQL more and try to play around with it

Eddie
- look into Apollo GraphQL and typescript for react-natice

Next time we will begin setup for backend.

----- 2/21/19 -----
Initiated the front end application (react-native with typescript). Also set up file structure and began setting up app navigation using react-navigation.

Found great examples (with go-graphql, postgres/sqlx, go) on GitHub to learn how to properly structure a backend with such a stack.

Brian
- take what you learned from examples, documentation, and experiments and create a draft of the backend.

Eddie
- set up react navigation
- create two pages and navigate between.

----- 2/26/19 -----
Eddie explained Front End file structure to Brian. Brian explained Backend file structure to Eddie. 

Eddie
- Stop slacking and actually begin to work on components
- Find ways around not having Apollo set up

----- 3/5/19 -----
Brian continued to work on Backend architecture and FINALLY finished it, and it's quite dope.
Eddie finished more important components for the app

Eddie
- Keep adding components

Brian
- Add user-chats membership functionality

----- 3/19/19 -----
Brian completed most of the user-chats functionality, but realized he needed to set up a way to do transactions within architecture. Dependency Injection makes this very hard.
Eddie added more components and cleaned up the file structure further.

Eddie
- Keep adding components, look into Apollo GraphQL

Brian
- Figure out solution for transactions

----- 4/5/19 -----
Brian finished transaction solution and cleaned up a lot of database manipulation functions, and finished user membership functionality.
Eddie completed Circle Screen and began messing with Apollo graphQL, decided to finsih major components before hooking up the Backend with Apollo.

Eddie
- FINISH THE APP ALREADY

Brian 
- Start working on Message Organization functionality

----- 4/10/19 -----
Brian completed Message Organization functionality. Also made some other important adjustments and fixes.
Eddie completed Chat button, Chat Circle Window, and Chat Circle button, the final major components for the app. Added mock data.

Eddie
- Time to actually hook up the backend and use real fake data and hit endpoints in app.

Brian
- Add read/unread functionality
- Add tests



Important shit to remember -
Front End:
- Finish front end
	+ Message input component
	+ Circles within a chat component
		+ modal for creating new circle
	+ Search component + create chat button component
	+ create chat flow
	+ new user sign up flow
	+ login flow (when you login, store user id in async)
- Apollo hookup
	1. Create user endpoint
	2. Login
	3. Create chat with user id
	4. Create circle within chat
	5. Send message
- Notifications (get phone id)
- Instant Messaging - see if Apollo has solution for that
- Make sure app doesn't look like poop on Android

Backend:
x Establish architecture and implement basic functionality
x Implement Chat-Membership functionality
x Create database transaction solution
- Add logger & testing
x Implement message group
- Notifications & front end solution to that
- Read receipts and unread messages
- Other necessary functionality at Eddie's discretion
- Open sockets / Apollo solution to IM
- Find out what the fuck GraphQL loaders are (cache)
- Search (two types)
- Lettuce (Redis) messaging
- User authentication platform